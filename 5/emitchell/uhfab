#!/bin/python

import sys
import numpy as np
from numpy import linalg as LA
from scipy import linalg as SLA

class UHF(object):
        def __init__(self,mol,mints):
                self.mol = mol
                self.mints = mints
                self.Vnu = mol.nuclear_repulsion_energy()
                self.S = np.array(mints.ao_overlap())    # overlap integrals
                self.T = np.array(mints.ao_kinetic())    # kinetic energy integrals
                self.V = np.array(mints.ao_potential())  # electron-nuclear attraction integrals
                self.g = np.transpose(np.array(mints.ao_eri()),(0,2,1,3))   # electron-electron repulsion integrals
                self.X = SLA.fractional_matrix_power(self.S,-0.5)   # Orthoganlizer
                self.nocc = int(sum([mol.Z(A) for A in range(mol.natom())] )) - mol.molecular_charge()   # Number of occupied orbitals
                self.nalpha = (self.nocc + mol.multiplicity()) // 2
                self.nbeta = self.nocc - self.nalpha
                self.norb = mints.basisset().nbf()   # number of (spatial) orbitals = number of basis functions
                self.h = self.T + self.V   # Core Hamiltonian
                # Guess density matrix 
                self.P = self.h 
                self.Q = -self.h

        def scf(self):
                Pold = np.copy(self.P)
                Qold = np.copy(self.Q)
                # Build Fock Matrix
                J = np.einsum('mrns,sr -> mn', self.g, (Pold + Qold))
                Ka = np.einsum('mrsn,sr -> mn', self.g, Pold)
                Kb = np.einsum('mrsn,sr -> mn', self.g, Qold)
                self.va = J - Ka 
                self.vb = J - Kb
                fa = self.h + self.va
                fb = self.h + self.vb
                # Diagonalize Fock Matrix
                self.Fa = LA.multi_dot([self.X, fa, self.X])   # Transformed alpha to orthogonalized AO basis
                self.Fb = LA.multi_dot([self.X, fb, self.X])   # Transformed beta to orthogonalized AO basis
                self.nrga, coeffa = LA.eigh(self.Fa)  # Returns alpha orbital energies and MO coefficients
                self.nrgb, coeffb = LA.eigh(self.Fb)  # Returns beta orbital energies and MO coefficients
                # Build Density Matrix
                self.Ca = np.dot(self.X,coeffa)
                self.Cb = np.dot(self.X,coeffb)
                Cocca = self.Ca[:,:self.nalpha]   # Removes alpha virtual orbitals
                Coccb = self.Cb[:,:self.nbeta]   # Removes beta virtual orbitals
                self.P = np.einsum('mi,ni -> mn', Cocca, np.conj(Cocca)) 
                self.Q = np.einsum('mi,ni -> mn', Coccb, np.conj(Coccb)) 
                self.get_energy()
                return self.Etot

        def get_energy(self):   # Determines the electronic energy from density matrix to get total energy
                Ee1 = np.einsum('mn,nm', self.h, (self.P + self.Q))
                Ee2a = np.einsum('mn,nm', self.va, self.P) 
                Ee2b = np.einsum('mn,nm', self.vb, self.Q)
                Ee = Ee1 + (0.5 * (Ee2a + Ee2b)) 
                self.Etot = Ee + self.Vnu
                return self

        def optimize_energy(self,conv_tol,maxiter,verbose):   # Optimizes the energy with respect to the density matrix
                Eold = 0
                i = 0
                conv = 100
                if verbose == True:
                        print("-" * 49)
                while abs(conv) > float(conv_tol):
                        Enew = self.scf()
                        if verbose == True:
                                print("Iteration: {:4}  |  Energy: {: 20.14f}".format(i,Enew))
                        conv = Eold - Enew
                        Eold = Enew
                        if i == int(maxiter):
                                sys.exit("Could not converge in {} iterations.".format(maxiter)) 
                        i += 1
                if verbose == True:
                        print(("-" * 49))
                print("UHF Final Energy:  {:> 20.14f}".format(Enew))
                return Enew
